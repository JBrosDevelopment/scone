//ArrayExpression
void: arrays() {
    i32[]: arr = []; // in declaration
    arr.push(99); // pushing
    (u8, u8)[][]: b = [[(0, 0)], [], [(1, 1)]]; // complex type
    use_array([0, 1, 2]); // used in function
    // pointers in arrays and array pointers
    bool: val = false;
    bool*[]: bp_array: [&val];
    bool*[]*: bp_array_ptr = &bp_array;
    free(bp_array_ptr)
    //get array
    bool[]: bools = get_bool_array();
    for b in bools { print(b); }
}
bool[]: get_bool_array() {
    [false, true, false]
}
pub struct Vec<Y> {
    Y: select<Y>(Fn<Y, T>: fn) {
        Y[]: result = [];
        for element in self {
            Y: item = fn(element);
            result.push(item);
        }
        return result;
    }
}
void select_test() {
    i32[]: arr = [1, 2, 3, 4, 5];
    char[] result = arr.select<char>(x => x as char);
    // some_other_value = result;
}
//AsCast
void: as_cast() {
    i32: a = 0;
    u8: c = a as u8;
    f32*: arr = malloc(sizeof(f32) * 5) as f32*;
    free(arr);
}
//Assignment
void: assignment() {
    i32: a = 0;
    a += 25;
    a = fancy_function(0, 1, 2, [9]);
}
//Break
//ClassDeclaration
//CodeBlock
//Constant
void: constants() {
    string: s = func("John");
    print(s);
}
string: func(string: name) {
    // strings
    string: s = "hello, " + name;
    s += "!";
    return s;
}
//Continue
//Discard
void: discard() {
    _ = 0 + hmm();
    i32[]: arr = ;
    for _ in [0, 1, 2] {
        nothing();
    }
    arr.select(_ => something());
}
//EnumDeclaration
enum Options {
    Yes,
    No,
    Maybe
}
enum Atrributes {
    ThisThing = 0b00,
    ThatThing = 0b10,
    OtherThing = 0b01,
}
//For
void for_loop() {
    i32[]: n = [];
    for i32: i = 0, i < 10, i += 1 {
        for i32: j = 0, j < 10, j += 2 {
            n.push(i * j);
        }
    }
    for index, i32: i = n.size / 4, i < n.size * 0.75, i += index {
        print(n[i]);
    }
}
//ForEach
void for_each_loop() {
    for b in [true, false, false, true] {
        print(b);
    }
    for (x, y) in z() {
        print(x);
        print(y);
    }
    i32: collection = 100;
    for i, item in collection.as_range() {
        print(i);
    }
}
(char, char) z() => (0, 0);
//FunctionCall
//FunctionDeclaration
//Identifier
//Indexer
//If
//IsCheck
//LambdaExpression
//Match
//ObjectInstantiation
//Operator
//ReturnExpression
//ScopedExpression
//Shebang
//StructDeclaration
//TernaryOperator
//TraitDeclaration
//TupleDeclaration
//TupleExpression
//TypeDef
//TypeDefinition
//TypeIdentifier
//UnaryOperator
//Use
//VariableDeclaration
//While
//DeferStatement