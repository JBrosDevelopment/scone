if a {
    Thing[]: things = [];
    for c in things.colors.iter().filter(x => x.is_good()).collect() {
        Thing: t = Thing {};
        t.color.red = c.red;
        t.color.green = c.green;
        t.color.blue = c.blue;
        t.color.alpha = c.alpha;
        t.name = "COLOR";
        for x in things {
            if x.color.red == c.red && x.color.green == c.green && x.color.blue == c.blue && x.color.alpha == c.alpha {
                t.name = "COLOR | " + x.name.to_string();
                break;
            }
        }
        things.push(t);
    }
} else if b {
    Thing[]: things = [];
    for index, c in things.colors.iter().filter(x => x.is_good()).collect() {
        Thing: t = Thing {};
        t.color.red = c.red;
        t.color.green = c.green;
        t.color.blue = c.blue;
        t.color.alpha = c.alpha;
        t.name = "COLOR " + index.to_string();
        for x in things {
            if x.color.red == c.red && x.color.green == c.green && x.color.blue == c.blue && x.color.alpha == c.alpha {
                t.name = "COLOR | " + x.name.to_string();
                break;
            }
        }
        things.push(t);
    }
} else if c {
    Thing[]: things = [];
    Color[]: colors = things.colors.iter().filter(x => x.is_good()).collect();
    for usize: i = 0, i < colors.len(), i += 1 {
        Thing: t = Thing {};
        t.color.red = colors[i].red;
        t.color.green = colors[i].green;
        t.color.blue = colors[i].blue;
        t.color.alpha = colors[i].alpha;
        t.name = "COLOR";
        for x in things {
            if x.color.red == c.red && x.color.green == c.green && x.color.blue == c.blue && x.color.alpha == c.alpha {
                t.name = "COLOR | " + x.name.to_string();
                break;
            }
        }
        things.push(t);
    }
} else {
    Thing[]: things = [];
    Color[]: colors = things.colors.iter().filter(x => x.is_good()).collect();
    for index, usize: i = 1, i < colors.len(), i += 1 {
        Thing: t = Thing {};
        t.color.red = colors[i].red;
        t.color.green = colors[i].green;
        t.color.blue = colors[i].blue;
        t.color.alpha = colors[i].alpha;
        t.name = "COLOR " + index.to_string();
        for x in things {
            if x.color.red == c.red && x.color.green == c.green && x.color.blue == c.blue && x.color.alpha == c.alpha {
                t.name = "COLOR | " + x.name.to_string();
                break;
            }
        }
        things.push(t);
    }
}


;// TODO:
// use "library"; // keyword for library imports
// #! crumb // for compiler: shorthand used when instantiating a class
// #! def NAME = VALUE // for compiler: define compile time constants
// #! def ADD(x, y) x + y // define function
// #! once NAME // for compiler if not defined, then define. For files
// #! ifndef NAME // spceific compile time if
// #! if ARGUMENT // if statement for compiler
// #! deprecated 
// #! allow WARNING_OR_ERROR
// #! warn WARNING_OR_ERROR
// #! error WARNING_OR_ERROR
// u0: add(u8: a, u8: b) { }
// string: to_string() => "Obj [" + name.to_string() + "]";
// typedef (u8, u8, u8) -> Color;
// enum Files { File1 = 0, File2 }
// class Color -> Traits { }
// struct Pixel -> Extends { }
// trait Number { }