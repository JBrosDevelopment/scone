x = -((5 + array[0][2]) * ~(tuple[1].b));
//result = func(array[1][2], (nested { x = 1 }).x, true);
//auto: expr = (2 * (3 + 5)).a + array[3][4];
//matrix[1][0] = (10 + nested[0][0]).a;
//str: complex = (nested::call<type1, type2>(arg1, arg2)[0]).a + "suffix";

// TODO:
// if 0 == 0 || false { }
// else if true { }
// else { }
// while true { }
// for x in array.skip(1) { }
// match name { "john" => {}, "doe" => {}, _ => {} }
// loadlib "file.dll" // load dll
// use LIB::This // include library
// use LIB::* // library with astrix includes
// use LIB::{a, b} // includes specific members
// #! alias // for compiler: shorthand for instantiation of class
// #! def NAME = VALUE // for compiler: define compile time constants
// #! def ADD(x, y) x + y // define function
// #! once NAME // for compiler if not defined, then define. For files
// #! ifndef NAME // spceific compile time if
// #! if ARGUMENT // if statement for compilers
// #! deprecated 
// #! allow WARNING_OR_ERROR
// #! warn WARNING_OR_ERROR
// #! error WARNING_OR_ERROR
// void: add(u8: a, u8: b) -> "example" { }
// enum Files { File1 = 0 -> "1", File2 }
// class Color { }
// struct Pixel { }
