match a.b(c => d.e, f + g).h().i {
    1 | 2 => a.b(c => d.e, f + g).h,
    _ => {
        hello.world = 1 + 2;
        match a.b(c => d.e, f + g).h {
            1 | 2 => a.b(c => d.e, f + g).h,
            _ => {
                hello.world = 1 + 2;
                match a.b(c => d.e, f + g).h {
                    1 | 2 => a.b(c => d.e, f + g).h,
                    _ => {
                        hello.world = 1 + 2;
                        match a.b(c => d.e, f + g).h {
                            1 | 2 => a.b(c => d.e, f + g).h,
                            _ => {}
                        }
                    }
                }
            }
        }
    }
}


;// TODO:
// use "library"; // keyword for library imports
// #! crumb // for compiler: shorthand used when instantiating a class
// #! def NAME = VALUE // for compiler: define compile time constants
// #! def ADD(x, y) x + y // define function
// #! once NAME // for compiler if not defined, then define. For files
// #! ifndef NAME // spceific compile time if
// #! if ARGUMENT // if statement for compiler
// #! deprecated 
// #! allow WARNING_OR_ERROR
// #! warn WARNING_OR_ERROR
// #! error WARNING_OR_ERROR
// u0: add(u8: a, u8: b) { }
// string: to_string() => "Obj [" + name.to_string() + "]";
// typedef (u8, u8, u8) -> Color;
// enum Files { File1 = 0, File2 }
// class Color -> Traits { }
// struct Pixel -> Extends { }
// trait Number { }