pub String: format(String: message, (ToString)[]: params ...) {
    u8[]: chars = message.to_chars();
    bool: in_escape = false;
    String: result = "";
    u32: params_index = 0;
    for c in chars {
        if in_escape {
            match c {
                'n' => result.push('\n'),
                't' => result.push('\t'),
                'r' => result.push('\r'),
                '\'' => result.push('\''),
                '\\' => result.push('\\'),
                '0' => result.push('\0'),
                '%' => result.push('%'),
                _ => break
            }
            continue;
        }

        if c == '\\' {
            in_escape = true;
        } else if c == '%' {
            in_escape = false;
            result.push_string(params[params_index].to_string());
            params_index += 1;
        } else {
            in_escape = false;
            result.push(c);
        }
    }

    result
}


trait Default {
    Self: default();
}

trait ToString {
    String: to_string();
}

struct Color -> Default, ToString {
    u8: r = 0;
    u8: g = 0;
    u8: b = 0;

    #! crumb
    pub static Color: new(u8: _r, u8: _g, u8: _b) {
        Color { r = _r, g = _g, b = _b }
    } 

    #! crumb
    pub static Color: default() {
        new(0, 0, 0)
    }

    pub String: to_string() {
        format("{Color R = %, G = %, B = %}", r, g, b);
    }
}