pub fn precedence(op: String) -> i32 {
    match op.as_str() {
        "->"| "=>" => -1,
        ";" => 1,
        ":" => 3,
        "=" => 3,
        ">" | "<" | ">=" | "<=" => 4,
        "+" | "-" => 5,
        "*" | "/" => 6,
        "^" | "_" => 7,
        "%" => 8,
        _ => 0,
    }
}
pub fn parse(lexer_tokens: Vec<Token>) -> Result<Vec<Box<dyn ASTNode>>, String> {
    let mut lines = lexer_tokens.split(|t| t.token_type == TokenType::EndOfLine).map(|l| l.to_vec()).filter(|x| !x.is_empty()).collect::<Vec<Vec<Token>>>().iter().peekable();
    let mut returns: Vec<Box<dyn ASTNode>> = Vec::new();

    while let Some(l) = lines.peek() {
        let mut chars = l.tokens.iter().peekable();
        let char_len = chars.clone().count();
        let mut last_was_digit_or_closing = false;
        let mut last_was_variable = false;
        let mut operator_stack: Vec<Token> = Vec::new();
        let mut expr_stack: Vec<Box<dyn ASTNode>> = Vec::new();
        let number = l.number;

        while let Some(c) = chars.peek() {
            match c.token_type {
                TokenType::LParen => {
                    if last_was_digit_or_closing || last_was_variable {
                        // Implicit multiplication: e.g., "2(" or ")("
                        operator_stack.push(Token::new(TokenType::Star,"*".to_string(), String::new(), c.location.clone()));
                    }
                    operator_stack.push((*c).clone());
                    chars.next();
                    last_was_digit_or_closing = false;
                    last_was_variable = false;
                }
                TokenType::NumberConstant => {
                    expr_stack.push(Box::new(ASTNodeConstant { token: (*c).clone() }));
                    chars.next();
                    last_was_digit_or_closing = true;
                    last_was_variable = false;
                }
                TokenType::Dash => {
                    if !last_was_digit_or_closing && !last_was_variable {
                        chars.next();
                        let operator = Token::new(TokenType::Dash,"-".to_string(), String::new(), c.location.clone());
                        let e1: ASTNodeConstant = ASTNodeConstant { token: Token::new(TokenType::NumberConstant,"0".to_string(), String::new(), c.location.clone()) };
                        let e2 = ASTNodeConstant { token: Token::new(TokenType::NumberConstant,chars.peek().unwrap().clone().clone(), String::new(), c.location.clone()) };
                        expr_stack.push(Box::new(ASTNodeExpression {token: c.clone(), lhs: Some(Box::new(e1)), rhs: Some(Box::new(e2))}));
                    } else {
                        while operator_stack.last().map_or(false, |top| precedence(top.value.clone()) >= precedence(c.value.clone())) && expr_stack.len() > 1 {
                            let operator = operator_stack.pop().unwrap();
                            let e2 = expr_stack.pop().unwrap();
                            let e1 = expr_stack.pop().unwrap();
                            expr_stack.push(Box::new(ASTNodeExpression {token: c.clone(), lhs: Some(e1), rhs: Some(e2)}));
                        }
                        operator_stack.push((*c).clone());
                    }
                    chars.next();
                    last_was_digit_or_closing = false;
                    last_was_variable = false;
                }
                TokenType::Plus | TokenType::Star | TokenType::Slash | TokenType::Modulas | TokenType::Equal | TokenType::NotEqual | TokenType::GreaterThan | TokenType::GreaterThanOrEqual | TokenType::LessThan | TokenType::LessThanOrEqual | TokenType::Pipe | TokenType::Carrot | TokenType::Ampersand | TokenType::Tilda | TokenType::BitwiseShiftLeft | TokenType::BitwiseShiftRight | TokenType::And | TokenType::Or => {
                    while operator_stack.last().map_or(false, |top| precedence(top.value.clone()) >= precedence(c.value.clone())) && expr_stack.len() > 1 {
                        let operator = operator_stack.pop().unwrap();
                        let e2 = expr_stack.pop().unwrap();
                        let e1 = expr_stack.pop().unwrap();
                        expr_stack.push(Box::new(ASTNodeExpression {token: operator.clone(), lhs: Some(e1), rhs: Some(e2)}));
                    }
                    operator_stack.push((*c).clone());
                    chars.next();
                    last_was_digit_or_closing = false;
                    last_was_variable = false;
                }
                TokenType::Not => {
                    let operator = Token::new(TokenType::Not,"!".to_string(), String::new(), c.location.clone());
                    let e1 = expr_stack.pop().unwrap();
                    let e2 = None;
                    expr_stack.push(Box::new(ASTNodeExpression {token: operator, lhs: Some(e1), rhs: e2}));

                    chars.next();
                    last_was_digit_or_closing = false;
                    last_was_variable = false;
                }
                TokenType::RParen => {
                    while operator_stack.last().map_or(false, |op| op.token_type != TokenType::LParen) && expr_stack.len() > 1 {
                        let operator = operator_stack.pop().unwrap();
                        let e2 = expr_stack.pop().unwrap();
                        let e1 = expr_stack.pop().unwrap();
                        expr_stack.push(Box::new(ASTNodeExpression {token: operator, lhs: Some(e1), rhs: Some(e2)}));
                    }
                    operator_stack.pop(); // Pop the '('
                    chars.next();
                    last_was_digit_or_closing = true;
                    last_was_variable = false;
                }
                TokenType::Identifier => {
                    // Get all tokens inside the parentheses
                    let mut params_tokens_inside_parens: Vec<Vec<Token>> = vec![vec![]];
                    let mut params_index = 0;
                    let mut parenthesis_count = 0;
                    let mut index = 0;
                    let name = (*c).clone();
                    chars.next();

                    while let Some(c) = chars.peek() {
                        match c.token_type {
                            TokenType::LParen => {
                                index += 1;
                                parenthesis_count += 1;
                                if parenthesis_count > 1 {
                                    params_tokens_inside_parens[params_index].push((*c).clone());
                                }
                                chars.next();
                            }
                            TokenType::RParen => {
                                if index == 0 {
                                    break;
                                }
                                index += 1;
                                parenthesis_count -= 1;
                                let mut breaks = false;
                                if parenthesis_count == 0 {
                                    breaks = true;
                                }
                                else {
                                    params_tokens_inside_parens[params_index].push((*c).clone());
                                }
                                chars.next();
                                
                                if breaks{
                                    break;
                                }
                            }
                            TokenType::Comma => {
                                if index == 0 {
                                    break;
                                }
                                index += 1;
                                if parenthesis_count == 1 {
                                    params_tokens_inside_parens.push(vec![]);
                                    params_index += 1;
                                }
                                else {
                                    params_tokens_inside_parens[params_index].push((*c).clone());
                                }
                                chars.next();
                            }
                            _ => {
                                if index == 0 {
                                    break;
                                }
                                index += 1;
                                params_tokens_inside_parens[params_index].push((*c).clone());
                                chars.next();
                            }
                        }
                    }

                    if index == 0 {
                        // is variable
                        
                        expr_stack.push(Box::new(ASTNodeExpression { token: (*c).clone(), lhs: None, rhs: None }));
                        last_was_digit_or_closing = true;
                        last_was_variable = true;
                    }
                    else {
                        // is function
                        let mut parsed_tokens: Vec<Box<dyn ASTNode>> = Vec::new();
                        if params_tokens_inside_parens[0].len() != 0 {   
                            for tokens_inside_parens in params_tokens_inside_parens {
                                parsed_tokens.push(parse(tokens_inside_parens).unwrap()[0]);
                            }
                        }
                        
                        expr_stack.push(Box::new(ASTNodeFunctionCall { token: (*c).clone(), argumments: parsed_tokens, path: ObjectPath { name, child: None }, type_parameters: None }));
                        
                        last_was_digit_or_closing = true;
                        last_was_variable = false;
                    }
                }
                _ => {
                    panic!("Unexpected character '{}' in line {}", c.value, number); // Error handling
                }
            }
        }

        let mut i = 0;
        while let Some(operator) = operator_stack.pop() {
            i += 1;
            if i < 99 {
                let mut e1 = ExprNode::new_num(Token { value: String::new(), token_type: TokenType::None }, number);
                let mut e2 = ExprNode::new_num(Token { value: String::new(), token_type: TokenType::None }, number);
                if !expr_stack.is_empty() {
                    e2 = expr_stack.pop().unwrap();
                }
                if !expr_stack.is_empty() {
                    e1 = expr_stack.pop().unwrap();
                }
                expr_stack.push(ExprNode::new_op(operator, e1, e2, number));
            }
        }

        returns.push(expr_stack.pop());
        lines.next();
    }
    returns
}

fn index_is_none(index: &Option<Token>) -> bool {
    index.is_none()
}