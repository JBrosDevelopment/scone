#! ifndef HELPER
#! def HELPER

#! expose
#! version 0.1
pub safe struct Vec<T> {
    #! expose
    T*: data;
    #! expose
    size_t: size;
    #! expose
    size_t: capacity;

    #! expose
    #! crumb
    static Self: new(T*: arr, size_t: length) {
        Self v = Self {};
        v.size = length;
        v.capacity = (length > 0) ? length : 1;
        v.data = malloc(sizeof(type) * v.capacity);
        if !v.data {
            fprintf(stderr, "Memory allocation failed\n");
            exit(EXIT_FAILURE);
        }
        memcpy(v.data, data, sizeof(type) * length);
        return v;
    }

    #! expose
    T*: get(size_t: index) {
        if index < 0 {
            print("Negative integers cannot be used to index");
            exit(EXIT_FAILURE);
        }
        if index >= self.size {
            print("Index out of bounds");
            exit(EXIT_FAILURE);
        }
        
        return ((self.data as char*) + index * sizeof(T)) as T*;        
    }

    T: set(size_t: index, T: value) {
        if index < 0 {
            print("Negative integers cannot be used to index");
            exit(EXIT_FAILURE);
        }
        if index >= self.size {
            print("Index out of bounds");
            exit(EXIT_FAILURE);
        }

        memcpy((self.data as char*) + index * sizeof(T), value, sizeof(T));
    }

    #! expose
    void: push(T: element) {
        if self.size == self.capacity {
            self.capacity *= 2;
            self.data = realloc(self.data, self.capacity * sizeof(T));
        }
        
        memcpy((self.data as char*) + self.size * sizeof(T), element, sizeof(T));
        self.size += 1;
    }

    #! expose
    void: free() {
        if T is string {
            for s in Self {
                if s != NULL {
                    s.free();
                }
            }
        }
        free(self.data);
        self.data = null;
    }


    Y: select<Y>(Fn<Y, T>: fn) {
        Y[]: result = [];
        for element in self {
            Y: item = fn(element);
            result.push(item);
        }
        return result;
    }
    
    T: op_index_get(size_t: index) {
        return *self.get(index);
    }
    void: op_index_set(size_t: index, T: v) {
        self.set(index, v);
    } 
}


// should parse to:

/*
#include <stdlib.h>
#include <string.h>
#include <stdio.h>

#define DEFINE_VEC(type)                                            \
typedef struct _Vector {                                            \
    type* data;                                                     \
    size_t size;                                                    \
    size_t capacity;                                                \
} Vec_##type;                                                       \
Vec_##type Vec_##type##_new(type* data, size_t length) {            \
    Vec_##type v;                                                   \
    v.size = length;                                                \
    v.capacity = (length > 0) ? length : 1;                         \
    v.data = malloc(sizeof(type) * v.capacity);                     \
    if (!v.data) {                                                  \
        fprintf(stderr, "Memory allocation failed\n");              \
        exit(EXIT_FAILURE);                                         \
    }                                                               \
    memcpy(v.data, data, sizeof(type) * length);                    \
    return v;                                                       \
}                                                                   \
type* Vec_##type##_get(Vec_##type* v, size_t index) {               \
    if (index >= v->size) {                                         \
        fprintf(stderr, "Out of bounds\n");                         \
        exit(EXIT_FAILURE);                                         \
    }                                                               \
    return &v->data[index];                                         \
}                                                                   \
void Vec_##type##_push(Vec_##type* v, type element) {               \
    if (v->size == v->capacity) {                                   \
        v->capacity *= 2;                                           \
        v->data = realloc(v->data, v->capacity * sizeof(type));     \
    }                                                               \
    v->data[v->size++] = element;                                   \
}                                                                   \
void Vec_##type##_free(Vec_##type* v) {                             \
    free(v->data);                                                  \
    v->data = NULL;                                                 \
}

#define CONCAT_INNER(x, y) x##y
#define CONCAT(x, y) CONCAT_INNER(x, y)
#define UNIQUE_NAME() CONCAT(_t, __LINE__)
#define UNIQUE_NAME(base) CONCAT(base, __LINE__)

#define COUNT_ARGS_IMPL(_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,N,...) N
#define COUNT_ARGS(...) COUNT_ARGS_IMPL(__VA_ARGS__,10,9,8,7,6,5,4,3,2,1)

#define VEC_LITERAL_VAR(name, T, ...) \
    T temp_##name##_arr[] = { __VA_ARGS__ }; \
    Vec_##T name = Vec_##T##_new(temp_##name##_arr, COUNT_ARGS(__VA_ARGS__));

#define VEC_LITERAL_VAR_EMPTY(name, T) \
    Vec_##T name = Vec_##T##_new(NULL, 0);

#define DEFINE_TUPLE(name, ...) \
    typedef struct _Struct_##name { __VA_ARGS__ } name;

#define MAKE_VEC_EXPR(T, ...) \
    ({ \
        static T _vec_tmp_data[] = { __VA_ARGS__ }; \
        Vec_##T _vec_tmp = Vec_##T##_new(_vec_tmp_data, COUNT_ARGS(__VA_ARGS__)); \
        _vec_tmp; \
    })

#define WITH_VEC(VTYPE, VNAME, VALUES, CALL_EXPR) \
    do { \
        typeof(((VTYPE*)0)->data[0]) CONCAT(_arr_, __LINE__)[] = VALUES; \
        VTYPE VNAME = VTYPE##_new(CONCAT(_arr_, __LINE__), COUNT_ARGS VALUES); \
        CALL_EXPR; \
        VTYPE##_free(VNAME); \
    } while (0)


*/


/*
//this transpiles from:
Vec<&Random::Structure*>: a = [];
//to:
typedef &Random__Structure* ref_Random__Structure_ptr;
DEFINE_VEC(ref_Random__Structure_ptr);
Vec_ref_Random__Structure_ptr a = Vec_ref_Random__Structure_ptr_new(&a);

//from:
int: main() {
    int[] i = [1, 2, 3];
    return i[0];
}

//to:
DEFINE_VEC(int);

int main() {
    int temp1[] = {1, 2, 3};
    Vec_int i = Vec_int_new(temp1, 3);
    return *Vec_int_get(&i, 2); 
    // fix so that:
    // int temp2 = *Vec_int_get(&i, 2);
    // Vec_int_free(&i);
    // return temp2;
}
*/

#! expose
pub string: format(string: message, string[]: params ...) {
    u8: chars = message.to_chars();
    bool: in_escape = false;
    string: result = "";
    u32: params_index = 0;
    for c in chars {
        if in_escape {
            match c {
                'n' => result.push('\n'),
                't' => result.push('\t'),
                'r' => result.push('\r'),
                '\'' => result.push('\''),
                '\\' => result.push('\\'),
                '0' => result.push('\0'),
                '%' => result.push('%'),
                _ => break
            }
            continue;
        }

        if c == '\\' {
            in_escape = true;
        } else if c == '%' {
            in_escape = false;
            result.push_string(params[params_index].to_string());
            params_index += 1;
        } else {
            in_escape = false;
            result.push(c);
        }
    }

    result
}

#! expose
pub void: print(string: message, string[]: params ...) {
    string: m = format(message, params);
    printf("%s", m);
}

#! expose
pub void: println(string: message, string[]: params ...) {
    string: m = format(message, params);
    printf("%s\n", m);
}

#! expose
pub string: input(string: message = "", string[]: params ...) { 
    print(message, params);

    u8*: str = NULL;
    size_t: len = 0;

    size_t: read = getline(&str, &len, stdin);

    // If getline failed
    if read == -1 {
        return ""; // or return null, or error
    }

    // Optionally trim trailing newline
    if read > 0 && str[read - 1] == '\n' {
        str[read - 1] = '\0';
    }

    // Return the string
    return string::from_u8_ptr(&str);
}

#! expose
pub extern void: printf(const string: message, (void*)[]: ...);
#! expose
pub extern i32: scanf(const string: format, (void*)[]: ...);
#! expose
pub extern safe struct FILE {
    u8*: _ptr;
    i32: _cnt;
    u8*: _base;
    i32: _flag;
    i32: _file;
    i32: _charbuf;
    i32: _bufsiz;
    u8*: _tmpfname;
}
#! expose
pub extern ssize_t: getline(u8**: input, size_t*: length, FILE*: stream);
#! expose
pub extern void: exit(size_t: exit_code);

pub void: panic(string: message, string[]: params ...) {
    string: err = format(message, params);
    println("Panicked at %:%: %", SCONE_FILE, SCONE_CALLER_LINE, err);
    exit(EXIT_FAILURE);
}


pub safe struct Option<T is Clonable> -> Free {
    T*: value = NULL;

    static Self: some(T: val) {
        Self: o = Self {};
        o.value = alloc<T>();
        *o.value = val;
        return o;
    }

    static Self: none() {
        return Self {}; 
    }

    T: unwrap() {
        if self.value == NULL {
            panic("Unwrapped empty value");
        }
        return (*self.value).clone();
    }

    bool: is_some() => self.value != NULL;
    bool: is_none() => self.value == NULL;

    void: free() {
        if self.value != NULL {
            dealloc(self.value);
        }
    }
}