pub mod error_handling;
pub mod lexer;
pub mod ast;
pub mod parser;

fn main() {
    let path = "src/testing/test_code.scn".to_string();
    let code = std::fs::read_to_string(&path).unwrap();
    
    // lexer
    let (tokens, output) = lexer::lex(&code, Some(path.clone()));
    
    let json = serde_json::to_string_pretty(&tokens).unwrap();
    std::fs::write("src/testing/lexer.out.json", json).unwrap();

    if output.has_errors() {
        error_handling::ErrorHandling::print_unable_to_continue_message();
        return;
    }

    // parser
    let (ast, _output) = parser::parse(tokens, &code, Some(path.clone()));

    let fmt_json = serde_json::to_string_pretty(&ast).unwrap();
    std::fs::write("src/testing/parser.out.json", fmt_json).unwrap();
}


#[allow(unused_imports)]
use ast::{ASTNode, ConstantNode, NodeType};
#[allow(unused_imports)]
use lexer::{Location, Token, TokenType};

#[test]
fn test_expressions1() {
    let code = "1 + 2".to_string();
    let (tokens, output) = crate::lexer::lex(&code, None);
    assert!(output.has_no_errors());

    let (ast, output) = crate::parser::parse(tokens, &code, None);
    assert!(output.has_no_errors());
    
    let str_output = format!("{:?}", ast);
    println!("{:?}", str_output);
    let str_expected_output = "[ASTNode { token: Token { token_type: Plus, value: \"+\", location: Location { line: 1, column: 3, length: 1 } }, node: Operator(Expression { left: ASTNode { token: Token { token_type: NumberConstant, value: \"1\", location: Location { line: 1, column: 1, length: 1 } }, node: Constant(ConstantNode { value: Token { token_type: NumberConstant, value: \"1\", location: Location { line: 1, column: 1, length: 1 } }, constant_type: U8 }) }, right: ASTNode { token: Token { token_type: NumberConstant, value: \"2\", location: Location { line: 1, column: 5, length: 1 } }, node: Constant(ConstantNode { value: Token { token_type: NumberConstant, value: \"2\", location: Location { line: 1, column: 5, length: 1 } }, constant_type: U8 }) }, operator: Token { token_type: Plus, value: \"+\", location: Location { line: 1, column: 3, length: 1 } } }) }]".to_string();
    assert_eq!(str_output, str_expected_output);
}

#[test]
fn test_expressions2() {
    let code = "void: main() { string: path = \"src/testing/test_code.scn\".to_string(); string: code = std::fs::read_to_string(&path).unwrap(); Token[]: tokens = lexer::lex(&code, &path); string: json = serde_json::to_string_pretty(&tokens).unwrap(); std::fs::write(\"src/testing/lexer.out.json\", json).unwrap(); ASTNode[]: ast = parser::parse(tokens, &path, &code); string: fmt_json = serde_json::to_string_pretty(&ast).unwrap(); std::fs::write(\"src/testing/parser.out.json\", fmt_json).unwrap(); }".to_string();
    let (tokens, output) = crate::lexer::lex(&code, None);
    assert!(output.has_no_errors());

    let (ast, output) = crate::parser::parse(tokens, &code, None);
    assert!(output.has_no_errors());
    
    let str_output = format!("{:?}", ast);
    println!("{:?}", str_output);
    let str_expected_output = "[ASTNode { token: Token { token_type: Identifier, value: \"main\", location: Location { line: 1, column: 7, length: 4 } }, node: FunctionDeclaration(FunctionDeclaration { name: Token { token_type: Identifier, value: \"main\", location: Location { line: 1, column: 7, length: 4 } }, return_type: ASTNode { token: Token { token_type: Identifier, value: \"void\", location: Location { line: 1, column: 1, length: 4 } }, node: TypeIdentifier(ScopedType { scope: [TypeIdentifier { name: Token { token_type: Identifier, value: \"void\", location: Location { line: 1, column: 1, length: 4 } }, scope_type: None, type_parameters: None }], is_ptr_or_ref: [], is_array: [] }) }, parameters: [], type_parameters: None, body: Some(BodyRegion { body: [ASTNode { token: Token { token_type: Identifier, value: \"path\", location: Location { line: 1, column: 24, length: 4 } }, node: VariableDeclaration(VariableDeclaration { access_modifier: [], var_type: ASTNode { token: Token { token_type: Identifier, value: \"string\", location: Location { line: 1, column: 16, length: 6 } }, node: TypeIdentifier(ScopedType { scope: [TypeIdentifier { name: Token { token_type: Identifier, value: \"string\", location: Location { line: 1, column: 16, length: 6 } }, scope_type: None, type_parameters: None }], is_ptr_or_ref: [], is_array: [] }) }, var_name: Token { token_type: Identifier, value: \"path\", location: Location { line: 1, column: 24, length: 4 } }, var_value: Some(ASTNode { token: Token { token_type: StringConstant, value: \"src/testing/test_code.scn\", location: Location { line: 1, column: 31, length: 27 } }, node: ScopedExpression(ScopedIdentifier { scope: [Identifier { expression: ASTNode { token: Token { token_type: StringConstant, value: \"src/testing/test_code.scn\", location: Location { line: 1, column: 31, length: 27 } }, node: Constant(ConstantNode { value: Token { token_type: StringConstant, value: \"src/testing/test_code.scn\", location: Location { line: 1, column: 31, length: 27 } }, constant_type: String }) }, scope_type: None, type_parameters: None }, Identifier { expression: ASTNode { token: Token { token_type: Identifier, value: \"to_string\", location: Location { line: 1, column: 59, length: 9 } }, node: FunctionCall(FunctionCall { parameters: NodeParameters { parameters: [ASTNode { token: Token { token_type: None, value: \"\", location: Location { line: 0, column: 0, length: 0 } }, node: None }] }, type_parameters: None, name: Token { token_type: Identifier, value: \"to_string\", location: Location { line: 1, column: 59, length: 9 } } }) }, scope_type: Some(Dot), type_parameters: None }] }) }) }) }, ASTNode { token: Token { token_type: Identifier, value: \"code\", location: Location { line: 1, column: 80, length: 4 } }, node: VariableDeclaration(VariableDeclaration { access_modifier: [], var_type: ASTNode { token: Token { token_type: Identifier, value: \"string\", location: Location { line: 1, column: 72, length: 6 } }, node: TypeIdentifier(ScopedType { scope: [TypeIdentifier { name: Token { token_type: Identifier, value: \"string\", location: Location { line: 1, column: 72, length: 6 } }, scope_type: None, type_parameters: None }], is_ptr_or_ref: [], is_array: [] }) }, var_name: Token { token_type: Identifier, value: \"code\", location: Location { line: 1, column: 80, length: 4 } }, var_value: Some(ASTNode { token: Token { token_type: Identifier, value: \"std\", location: Location { line: 1, column: 87, length: 3 } }, node: ScopedExpression(ScopedIdentifier { scope: [Identifier { expression: ASTNode { token: Token { token_type: Identifier, value: \"std\", location: Location { line: 1, column: 87, length: 3 } }, node: Identifier(Token { token_type: Identifier, value: \"std\", location: Location { line: 1, column: 87, length: 3 } }) }, scope_type: None, type_parameters: Some(NodeParameters { parameters: [] }) }, Identifier { expression: ASTNode { token: Token { token_type: Identifier, value: \"fs\", location: Location { line: 1, column: 92, length: 2 } }, node: Identifier(Token { token_type: Identifier, value: \"fs\", location: Location { line: 1, column: 92, length: 2 } }) }, scope_type: Some(DoubleColon), type_parameters: Some(NodeParameters { parameters: [] }) }, Identifier { expression: ASTNode { token: Token { token_type: Identifier, value: \"read_to_string\", location: Location { line: 1, column: 96, length: 14 } }, node: FunctionCall(FunctionCall { parameters: NodeParameters { parameters: [ASTNode { token: Token { token_type: Ampersand, value: \"&\", location: Location { line: 1, column: 111, length: 1 } }, node: UnaryOperator(UnaryExpression { operand: ASTNode { token: Token { token_type: Identifier, value: \"path\", location: Location { line: 1, column: 112, length: 4 } }, node: Identifier(Token { token_type: Identifier, value: \"path\", location: Location { line: 1, column: 112, length: 4 } }) }, operator: Token { token_type: Ampersand, value: \"&\", location: Location { line: 1, column: 111, length: 1 } } }) }] }, type_parameters: None, name: Token { token_type: Identifier, value: \"read_to_string\", location: Location { line: 1, column: 96, length: 14 } } }) }, scope_type: Some(DoubleColon), type_parameters: None }, Identifier { expression: ASTNode { token: Token { token_type: Identifier, value: \"unwrap\", location: Location { line: 1, column: 118, length: 6 } }, node: ScopedExpression(ScopedIdentifier { scope: [Identifier { expression: ASTNode { token: Token { token_type: Identifier, value: \"unwrap\", location: Location { line: 1, column: 118, length: 6 } }, node: FunctionCall(FunctionCall { parameters: NodeParameters { parameters: [ASTNode { token: Token { token_type: None, value: \"\", location: Location { line: 0, column: 0, length: 0 } }, node: None }] }, type_parameters: None, name: Token { token_type: Identifier, value: \"unwrap\", location: Location { line: 1, column: 118, length: 6 } } }) }, scope_type: None, type_parameters: None }] }) }, scope_type: Some(Dot), type_parameters: None }] }) }) }) }, ASTNode { token: Token { token_type: Identifier, value: \"tokens\", location: Location { line: 1, column: 137, length: 6 } }, node: VariableDeclaration(VariableDeclaration { access_modifier: [], var_type: ASTNode { token: Token { token_type: Identifier, value: \"Token\", location: Location { line: 1, column: 128, length: 5 } }, node: TypeIdentifier(ScopedType { scope: [TypeIdentifier { name: Token { token_type: Identifier, value: \"Token\", location: Location { line: 1, column: 128, length: 5 } }, scope_type: None, type_parameters: None }], is_ptr_or_ref: [], is_array: [[ASTNode { token: Token { token_type: None, value: \"\", location: Location { line: 0, column: 0, length: 0 } }, node: None }]] }) }, var_name: Token { token_type: Identifier, value: \"tokens\", location: Location { line: 1, column: 137, length: 6 } }, var_value: Some(ASTNode { token: Token { token_type: Identifier, value: \"lexer\", location: Location { line: 1, column: 146, length: 5 } }, node: ScopedExpression(ScopedIdentifier { scope: [Identifier { expression: ASTNode { token: Token { token_type: Identifier, value: \"lexer\", location: Location { line: 1, column: 146, length: 5 } }, node: Identifier(Token { token_type: Identifier, value: \"lexer\", location: Location { line: 1, column: 146, length: 5 } }) }, scope_type: None, type_parameters: Some(NodeParameters { parameters: [] }) }, Identifier { expression: ASTNode { token: Token { token_type: Identifier, value: \"lex\", location: Location { line: 1, column: 153, length: 3 } }, node: FunctionCall(FunctionCall { parameters: NodeParameters { parameters: [ASTNode { token: Token { token_type: Ampersand, value: \"&\", location: Location { line: 1, column: 157, length: 1 } }, node: UnaryOperator(UnaryExpression { operand: ASTNode { token: Token { token_type: Identifier, value: \"code\", location: Location { line: 1, column: 158, length: 4 } }, node: Identifier(Token { token_type: Identifier, value: \"code\", location: Location { line: 1, column: 158, length: 4 } }) }, operator: Token { token_type: Ampersand, value: \"&\", location: Location { line: 1, column: 157, length: 1 } } }) }, ASTNode { token: Token { token_type: Ampersand, value: \"&\", location: Location { line: 1, column: 164, length: 1 } }, node: UnaryOperator(UnaryExpression { operand: ASTNode { token: Token { token_type: Identifier, value: \"path\", location: Location { line: 1, column: 165, length: 4 } }, node: Identifier(Token { token_type: Identifier, value: \"path\", location: Location { line: 1, column: 165, length: 4 } }) }, operator: Token { token_type: Ampersand, value: \"&\", location: Location { line: 1, column: 164, length: 1 } } }) }] }, type_parameters: None, name: Token { token_type: Identifier, value: \"lex\", location: Location { line: 1, column: 153, length: 3 } } }) }, scope_type: Some(DoubleColon), type_parameters: None }] }) }) }) }, ASTNode { token: Token { token_type: Identifier, value: \"json\", location: Location { line: 1, column: 180, length: 4 } }, node: VariableDeclaration(VariableDeclaration { access_modifier: [], var_type: ASTNode { token: Token { token_type: Identifier, value: \"string\", location: Location { line: 1, column: 172, length: 6 } }, node: TypeIdentifier(ScopedType { scope: [TypeIdentifier { name: Token { token_type: Identifier, value: \"string\", location: Location { line: 1, column: 172, length: 6 } }, scope_type: None, type_parameters: None }], is_ptr_or_ref: [], is_array: [] }) }, var_name: Token { token_type: Identifier, value: \"json\", location: Location { line: 1, column: 180, length: 4 } }, var_value: Some(ASTNode { token: Token { token_type: Identifier, value: \"serde_json\", location: Location { line: 1, column: 187, length: 10 } }, node: ScopedExpression(ScopedIdentifier { scope: [Identifier { expression: ASTNode { token: Token { token_type: Identifier, value: \"serde_json\", location: Location { line: 1, column: 187, length: 10 } }, node: Identifier(Token { token_type: Identifier, value: \"serde_json\", location: Location { line: 1, column: 187, length: 10 } }) }, scope_type: None, type_parameters: Some(NodeParameters { parameters: [] }) }, Identifier { expression: ASTNode { token: Token { token_type: Identifier, value: \"to_string_pretty\", location: Location { line: 1, column: 199, length: 16 } }, node: FunctionCall(FunctionCall { parameters: NodeParameters { parameters: [ASTNode { token: Token { token_type: Ampersand, value: \"&\", location: Location { line: 1, column: 216, length: 1 } }, node: UnaryOperator(UnaryExpression { operand: ASTNode { token: Token { token_type: Identifier, value: \"tokens\", location: Location { line: 1, column: 217, length: 6 } }, node: Identifier(Token { token_type: Identifier, value: \"tokens\", location: Location { line: 1, column: 217, length: 6 } }) }, operator: Token { token_type: Ampersand, value: \"&\", location: Location { line: 1, column: 216, length: 1 } } }) }] }, type_parameters: None, name: Token { token_type: Identifier, value: \"to_string_pretty\", location: Location { line: 1, column: 199, length: 16 } } }) }, scope_type: Some(DoubleColon), type_parameters: None }, Identifier { expression: ASTNode { token: Token { token_type: Identifier, value: \"unwrap\", location: Location { line: 1, column: 225, length: 6 } }, node: ScopedExpression(ScopedIdentifier { scope: [Identifier { expression: ASTNode { token: Token { token_type: Identifier, value: \"unwrap\", location: Location { line: 1, column: 225, length: 6 } }, node: FunctionCall(FunctionCall { parameters: NodeParameters { parameters: [ASTNode { token: Token { token_type: None, value: \"\", location: Location { line: 0, column: 0, length: 0 } }, node: None }] }, type_parameters: None, name: Token { token_type: Identifier, value: \"unwrap\", location: Location { line: 1, column: 225, length: 6 } } }) }, scope_type: None, type_parameters: None }] }) }, scope_type: Some(Dot), type_parameters: None }] }) }) }) }, ASTNode { token: Token { token_type: Identifier, value: \"std\", location: Location { line: 1, column: 235, length: 3 } }, node: ScopedExpression(ScopedIdentifier { scope: [Identifier { expression: ASTNode { token: Token { token_type: Identifier, value: \"std\", location: Location { line: 1, column: 235, length: 3 } }, node: Identifier(Token { token_type: Identifier, value: \"std\", location: Location { line: 1, column: 235, length: 3 } }) }, scope_type: None, type_parameters: Some(NodeParameters { parameters: [] }) }, Identifier { expression: ASTNode { token: Token { token_type: Identifier, value: \"fs\", location: Location { line: 1, column: 240, length: 2 } }, node: Identifier(Token { token_type: Identifier, value: \"fs\", location: Location { line: 1, column: 240, length: 2 } }) }, scope_type: Some(DoubleColon), type_parameters: Some(NodeParameters { parameters: [] }) }, Identifier { expression: ASTNode { token: Token { token_type: Identifier, value: \"write\", location: Location { line: 1, column: 244, length: 5 } }, node: FunctionCall(FunctionCall { parameters: NodeParameters { parameters: [ASTNode { token: Token { token_type: StringConstant, value: \"src/testing/lexer.out.json\", location: Location { line: 1, column: 250, length: 28 } }, node: Constant(ConstantNode { value: Token { token_type: StringConstant, value: \"src/testing/lexer.out.json\", location: Location { line: 1, column: 250, length: 28 } }, constant_type: String }) }, ASTNode { token: Token { token_type: Identifier, value: \"json\", location: Location { line: 1, column: 280, length: 4 } }, node: Identifier(Token { token_type: Identifier, value: \"json\", location: Location { line: 1, column: 280, length: 4 } }) }] }, type_parameters: None, name: Token { token_type: Identifier, value: \"write\", location: Location { line: 1, column: 244, length: 5 } } }) }, scope_type: Some(DoubleColon), type_parameters: None }, Identifier { expression: ASTNode { token: Token { token_type: Identifier, value: \"unwrap\", location: Location { line: 1, column: 286, length: 6 } }, node: ScopedExpression(ScopedIdentifier { scope: [Identifier { expression: ASTNode { token: Token { token_type: Identifier, value: \"unwrap\", location: Location { line: 1, column: 286, length: 6 } }, node: FunctionCall(FunctionCall { parameters: NodeParameters { parameters: [ASTNode { token: Token { token_type: None, value: \"\", location: Location { line: 0, column: 0, length: 0 } }, node: None }] }, type_parameters: None, name: Token { token_type: Identifier, value: \"unwrap\", location: Location { line: 1, column: 286, length: 6 } } }) }, scope_type: None, type_parameters: None }] }) }, scope_type: Some(Dot), type_parameters: None }] }) }, ASTNode { token: Token { token_type: Identifier, value: \"ast\", location: Location { line: 1, column: 307, length: 3 } }, node: VariableDeclaration(VariableDeclaration { access_modifier: [], var_type: ASTNode { token: Token { token_type: Identifier, value: \"ASTNode\", location: Location { line: 1, column: 296, length: 7 } }, node: TypeIdentifier(ScopedType { scope: [TypeIdentifier { name: Token { token_type: Identifier, value: \"ASTNode\", location: Location { line: 1, column: 296, length: 7 } }, scope_type: None, type_parameters: None }], is_ptr_or_ref: [], is_array: [[ASTNode { token: Token { token_type: None, value: \"\", location: Location { line: 0, column: 0, length: 0 } }, node: None }]] }) }, var_name: Token { token_type: Identifier, value: \"ast\", location: Location { line: 1, column: 307, length: 3 } }, var_value: Some(ASTNode { token: Token { token_type: Identifier, value: \"parser\", location: Location { line: 1, column: 313, length: 6 } }, node: ScopedExpression(ScopedIdentifier { scope: [Identifier { expression: ASTNode { token: Token { token_type: Identifier, value: \"parser\", location: Location { line: 1, column: 313, length: 6 } }, node: Identifier(Token { token_type: Identifier, value: \"parser\", location: Location { line: 1, column: 313, length: 6 } }) }, scope_type: None, type_parameters: Some(NodeParameters { parameters: [] }) }, Identifier { expression: ASTNode { token: Token { token_type: Identifier, value: \"parse\", location: Location { line: 1, column: 321, length: 5 } }, node: FunctionCall(FunctionCall { parameters: NodeParameters { parameters: [ASTNode { token: Token { token_type: Identifier, value: \"tokens\", location: Location { line: 1, column: 327, length: 6 } }, node: Identifier(Token { token_type: Identifier, value: \"tokens\", location: Location { line: 1, column: 327, length: 6 } }) }, ASTNode { token: Token { token_type: Ampersand, value: \"&\", location: Location { line: 1, column: 335, length: 1 } }, node: UnaryOperator(UnaryExpression { operand: ASTNode { token: Token { token_type: Identifier, value: \"path\", location: Location { line: 1, column: 336, length: 4 } }, node: Identifier(Token { token_type: Identifier, value: \"path\", location: Location { line: 1, column: 336, length: 4 } }) }, operator: Token { token_type: Ampersand, value: \"&\", location: Location { line: 1, column: 335, length: 1 } } }) }, ASTNode { token: Token { token_type: Ampersand, value: \"&\", location: Location { line: 1, column: 342, length: 1 } }, node: UnaryOperator(UnaryExpression { operand: ASTNode { token: Token { token_type: Identifier, value: \"code\", location: Location { line: 1, column: 343, length: 4 } }, node: Identifier(Token { token_type: Identifier, value: \"code\", location: Location { line: 1, column: 343, length: 4 } }) }, operator: Token { token_type: Ampersand, value: \"&\", location: Location { line: 1, column: 342, length: 1 } } }) }] }, type_parameters: None, name: Token { token_type: Identifier, value: \"parse\", location: Location { line: 1, column: 321, length: 5 } } }) }, scope_type: Some(DoubleColon), type_parameters: None }] }) }) }) }, ASTNode { token: Token { token_type: Identifier, value: \"fmt_json\", location: Location { line: 1, column: 358, length: 8 } }, node: VariableDeclaration(VariableDeclaration { access_modifier: [], var_type: ASTNode { token: Token { token_type: Identifier, value: \"string\", location: Location { line: 1, column: 350, length: 6 } }, node: TypeIdentifier(ScopedType { scope: [TypeIdentifier { name: Token { token_type: Identifier, value: \"string\", location: Location { line: 1, column: 350, length: 6 } }, scope_type: None, type_parameters: None }], is_ptr_or_ref: [], is_array: [] }) }, var_name: Token { token_type: Identifier, value: \"fmt_json\", location: Location { line: 1, column: 358, length: 8 } }, var_value: Some(ASTNode { token: Token { token_type: Identifier, value: \"serde_json\", location: Location { line: 1, column: 369, length: 10 } }, node: ScopedExpression(ScopedIdentifier { scope: [Identifier { expression: ASTNode { token: Token { token_type: Identifier, value: \"serde_json\", location: Location { line: 1, column: 369, length: 10 } }, node: Identifier(Token { token_type: Identifier, value: \"serde_json\", location: Location { line: 1, column: 369, length: 10 } }) }, scope_type: None, type_parameters: Some(NodeParameters { parameters: [] }) }, Identifier { expression: ASTNode { token: Token { token_type: Identifier, value: \"to_string_pretty\", location: Location { line: 1, column: 381, length: 16 } }, node: FunctionCall(FunctionCall { parameters: NodeParameters { parameters: [ASTNode { token: Token { token_type: Ampersand, value: \"&\", location: Location { line: 1, column: 398, length: 1 } }, node: UnaryOperator(UnaryExpression { operand: ASTNode { token: Token { token_type: Identifier, value: \"ast\", location: Location { line: 1, column: 399, length: 3 } }, node: Identifier(Token { token_type: Identifier, value: \"ast\", location: Location { line: 1, column: 399, length: 3 } }) }, operator: Token { token_type: Ampersand, value: \"&\", location: Location { line: 1, column: 398, length: 1 } } }) }] }, type_parameters: None, name: Token { token_type: Identifier, value: \"to_string_pretty\", location: Location { line: 1, column: 381, length: 16 } } }) }, scope_type: Some(DoubleColon), type_parameters: None }, Identifier { expression: ASTNode { token: Token { token_type: Identifier, value: \"unwrap\", location: Location { line: 1, column: 404, length: 6 } }, node: ScopedExpression(ScopedIdentifier { scope: [Identifier { expression: ASTNode { token: Token { token_type: Identifier, value: \"unwrap\", location: Location { line: 1, column: 404, length: 6 } }, node: FunctionCall(FunctionCall { parameters: NodeParameters { parameters: [ASTNode { token: Token { token_type: None, value: \"\", location: Location { line: 0, column: 0, length: 0 } }, node: None }] }, type_parameters: None, name: Token { token_type: Identifier, value: \"unwrap\", location: Location { line: 1, column: 404, length: 6 } } }) }, scope_type: None, type_parameters: None }] }) }, scope_type: Some(Dot), type_parameters: None }] }) }) }) }, ASTNode { token: Token { token_type: Identifier, value: \"std\", location: Location { line: 1, column: 414, length: 3 } }, node: ScopedExpression(ScopedIdentifier { scope: [Identifier { expression: ASTNode { token: Token { token_type: Identifier, value: \"std\", location: Location { line: 1, column: 414, length: 3 } }, node: Identifier(Token { token_type: Identifier, value: \"std\", location: Location { line: 1, column: 414, length: 3 } }) }, scope_type: None, type_parameters: Some(NodeParameters { parameters: [] }) }, Identifier { expression: ASTNode { token: Token { token_type: Identifier, value: \"fs\", location: Location { line: 1, column: 419, length: 2 } }, node: Identifier(Token { token_type: Identifier, value: \"fs\", location: Location { line: 1, column: 419, length: 2 } }) }, scope_type: Some(DoubleColon), type_parameters: Some(NodeParameters { parameters: [] }) }, Identifier { expression: ASTNode { token: Token { token_type: Identifier, value: \"write\", location: Location { line: 1, column: 423, length: 5 } }, node: FunctionCall(FunctionCall { parameters: NodeParameters { parameters: [ASTNode { token: Token { token_type: StringConstant, value: \"src/testing/parser.out.json\", location: Location { line: 1, column: 429, length: 29 } }, node: Constant(ConstantNode { value: Token { token_type: StringConstant, value: \"src/testing/parser.out.json\", location: Location { line: 1, column: 429, length: 29 } }, constant_type: String }) }, ASTNode { token: Token { token_type: Identifier, value: \"fmt_json\", location: Location { line: 1, column: 460, length: 8 } }, node: Identifier(Token { token_type: Identifier, value: \"fmt_json\", location: Location { line: 1, column: 460, length: 8 } }) }] }, type_parameters: None, name: Token { token_type: Identifier, value: \"write\", location: Location { line: 1, column: 423, length: 5 } } }) }, scope_type: Some(DoubleColon), type_parameters: None }, Identifier { expression: ASTNode { token: Token { token_type: Identifier, value: \"unwrap\", location: Location { line: 1, column: 470, length: 6 } }, node: ScopedExpression(ScopedIdentifier { scope: [Identifier { expression: ASTNode { token: Token { token_type: Identifier, value: \"unwrap\", location: Location { line: 1, column: 470, length: 6 } }, node: FunctionCall(FunctionCall { parameters: NodeParameters { parameters: [ASTNode { token: Token { token_type: None, value: \"\", location: Location { line: 0, column: 0, length: 0 } }, node: None }] }, type_parameters: None, name: Token { token_type: Identifier, value: \"unwrap\", location: Location { line: 1, column: 470, length: 6 } } }) }, scope_type: None, type_parameters: None }] }) }, scope_type: Some(Dot), type_parameters: None }] }) }] }), access_modifier: [] }) }, ASTNode { token: Token { token_type: None, value: \"\", location: Location { line: 0, column: 0, length: 0 } }, node: None }]".to_string();
    assert_eq!(str_output, str_expected_output);
}